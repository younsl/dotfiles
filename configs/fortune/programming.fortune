“말은 쉽지, 코드를 보여줘.”
“Talk is cheap. Show me the code.”
    – 리누스 토르발스(Linus Torvalds)
%
우리 모두는 대충 짠 프로그램이 돌아간다는 사실에 안도감을 느끼며
그래도 안 돌아가는 프로그램보다 돌아가는 쓰레기가 좋다고 스스로를 위로한다.
    - 책 Clean code
%
코드 리뷰야말로 지식을 퍼뜨리기에 완벽한 기회입니다.
    - '구글 엔지니어는 이렇게 일한다' 중
%
인프라는 더 자주 변경할수록 변경하기가 오히려 쉬워집니다.
    - '구글 엔지니어는 이렇게 일한다' 중
%
천재라고 해서 괴짜처럼 행동하는 게 용서받는 시대는 지났습니다.
천재든 아니든 사회성이 부족한 사람은 팀원으로 적합하지 않기 때문이죠.
    - '구글 엔지니어는 이렇게 일한다' 중
%
구글의 소스 코드 대부분은 하나의 리포지터리, 즉 모노리포에서 관리되며 약 5만여 엔지니어에게 공유됩니다.
    - '구글 엔지니어는 이렇게 일한다' 중
%
프로그래밍 측면에서 보면 직접 처음부터 새로 짜는 것보다 기존 인프라를 재활용하는 게 분명히 더 낫습니다.
두말하면 잔소리고, 기술이 진보할 수 있는 근본에 속합니다.
    - '구글 엔지니어는 이렇게 일한다' 중
%
소프트웨어는 애초에 복잡할 수밖에 없음을 결국은 인정해야 합니다.
완벽한 바이너리는 없습니다. 프로덕션에 새로운 변경을 릴리스할 때마다 무언가를 결정하고 절충해야 합니다.
    - '구글 엔지니어는 이렇게 일한다' 중
%
간결한 시스템 설계
시스템 설계를 최대한 간결하게 유지하는 것이 중요합니다.
설계가 간결하면 공격 가능성과 예상치 못한 시스템 동작이 발생할 가능성을 줄여줍니다.
또한 사람이 시스템의 동작을 이해하고 유추하기가 쉬워집니다.
    - 'SRE를 위한 시스템 설계와 구축' 중
%
모든 소프트웨어 문서화와 관련된 일반적인 문제는 문서들이 더 이상 쓸모없게 되고,
문서의 상태가 더 이상 업데이트되지 않는다는 점이다.
    - 책 마이크로서비스 중
%
운영 작업은 과도한 스트레스를 유발하며 투지도 요구된다.
소프트웨어가 불안정하면 고객이 즉시 영향을 받기 때문이다.
    - 책 '필독 개발자 온보딩 가이드' 중
%
처음 설계할 때만 해도 좋아 보이던 것들은
시간이 지나면서 점점 사라진다.
    - 책 '필독 개발자 온보딩 가이드' 중
%
지속적인 성장도 중요하지만 깨어 있는 내내 일만 하는 것은
건강을 해치므로 개인 시간을 반드시 확보하기 바란다.
    - 책 '필독 개발자 온보딩 가이드' 중
%
실수는 피할 수 없다.
소프트웨어 엔지니어가 되는 것은 어려운 일이며
누구든 실수를 저지를 수 있다.
    - 책 '필독 개발자 온보딩 가이드' 중
%
실수로부터 배운 것이 있다면 기록해두고 계속 정진해 나아가면 된다.
    - 책 '필독 개발자 온보딩 가이드' 중
%
매출 1조 원이 넘는 규모의 회사도 평범한 언어를 사용한다.
    - 책 '필독 개발자 온보딩 가이드' 중
%
언어가 사장되지 않는 한, 단지 오래됐다거나 관심이 줄었다는 사실이
그 언어를 사용하지 않을 이유는 되지 못한다.
    - 책 '필독 개발자 온보딩 가이드' 중
%
간결함은 가독성과 유지보수성을 향상시킵니다.
    - Rob Pike
%
문제를 작게 나누고 각 부분을 해결하면 전체가 해결됩니다.
    - Andrew Gerrand
%
소프트웨어 업계에서 버그 없는 코드를 작성하는 것은 불가능하다.
게다가 분산 애플리케이션으로 작업할 때는 장애가 일어날 확률이 훨씬 더 높아진다.
    - 책 '쿠버네티스 패턴' 중
%
"Software is going to eat the world"
    - Marc Andreessen
%
인공지능은 프로그래머의 기본적인 작업을 대신 담당하게 되면서,
인간 프로그래머에게는 더 창의적인 작업에 집중하고,
그들의 독특한 작업을 확장해갈 수 있는 여유를 제공한다.
    - 책 '샘 올트먼의 생각들' 중
%
"한 가지를 하라. 그리고 그걸 잘하라."
    - 유닉스 철학
%
시스템을 설계하는 모든 조직은
조직의 커뮤니케이션 구조를 복사한 설계를 개발하도록 제한된다.
    - Mel Conway
%
프로그래머를 압박하는 것이 버그를 신속하게 수정하는 데 도움이 되지 않는다는 사실을
그리고 내가 다른 모든 업무를 중단하고 문제 해결에 매달릴 것이란 사실을 그는 잘 알았다.
    - 책 '잡스의 기준' 중
%
우리는 '모든 일에서 언제나' 취향을 고수하고, 함께 협력하고
성실하게 일하고, 기능에 주목했다.
    - 책 '잡스의 기준' 중
%
인공지능은 당신을 대체하지 않습니다.
인공지능을 이해하고 활용하는 사람이 당신을 대체할 뿐이죠.
%
일을 하는 것도 중요하지만 그에 못지 않게, 일을 어떻게 하느냐도 중요합니다.
%
비즈니스 기능이 무엇인지를 파악할 때는 애플리케이션의 사용자에게
어떤 비즈니스 기능을 제공해주어야 하는지 생각하는 것부터 시작하는 것이 좋습니다.
    - 책 '클라우드 네이티브 애플리케이션 디자인 패턴' 중
%
리눅스는 탄생한 지 어느덧 30년이 지났음에도 시간이 지날수록 쇠퇴하기는커녕
점점 더욱 중요한 운영체제로 그 자리를 확고히 다지고 있다.
    - 모던 리눅스 교과서
%
컴퓨터 시스템에 운영 체제, 프로세스, 스레드 같은 개념이 존재하는 것에는 각자 다 이유가 있으며,
아무런 이유 없이 만들어지는 기술은 어디에도 없습니다.
    - 책 '컴퓨터 밑바닥의 비밀'
%
각 프로그램이 한 가지 일을 잘 하게 하라
    - 유닉스 철학
%
자신의 프로그래밍 실력이 부족하다고 느낀다면 회의나 제품설계 같은 다른 활동에
드는 시간을 줄이고 코드를 만들고 작성하는 시간을 늘려라
    - 책 '이펙티브 엔지니어' 중
%
'자신이 모르는 코드에 뛰어드는 것을 겁내지 않는 것'이
엔지니어링 분야에서의 성공과 큰 연관이 있다.
    - 책 '이펙티브 엔지니어' 중
%
"예기치 못한 큰 실패에 대한 최선의 방어책은 자주 실패하는 것이다."
    - 책 '이펙티브 엔지니어' 중
%
가치의 원천이 '코딩'인 적은 한 번도 없었다. 그러니 사람들은 코딩에
너무 집착하지 말아야 한다. 문제를 해결하는 것이야말로 핵심 기술이다.
%
당신을 대체하는 것은 인공지능이 아니라, 인공지능을 활용하는 다른 사람이다.
%
스쳐 지나가는 얄팍힌 기술, 문법, API 같은 것들은 지나가도록 내버려두고
인공지능과 커뮤니케이션하는 방법, 문제를 효율적으로 해결하는 방법 등에
깊은 관심을 가져야 한다.
%
오픈소스는 모두에게 평등한 접근권을 제공해 더 나은 플랫폼과 애플리케이션을
만들 수 있어 혁신을 가능하게 한다.
    - 책 '오픈: 비즈니스 패권의 열쇠' 중
%
달성하고자 하는 목표와 의도한 결과를 명확하게 정의하는 것이
모든 프롬프트 설계 과정에서 가장 중요한 첫 번째 단계입니다.
    - 책 '프롬프트 엔지니어링의 비밀' 중
%
삶과 비즈니스에서 예상치 못한 순간을 받아들이세요.
세상에서 가장 위대한 성공 중 일부는 우연한 순간에서 탄생했습니다.
    - 책 '프롬프트 엔지니어링의 비밀' 중
%
오퍼레이터 개발은 결코 만만찮은 일이다. 처음부터 애플리케이션 운영상의 모든 문제를
오퍼레이터로 해결하려고 애쓸 필요는 없다. 일단 가장 큰 걸림돌부터 해결하고,
여러 차례 개발 이터레이션을 반복하면서 조금씩 오퍼레이터의 기능을 개선하면 된다.
    - 책 '쿠버네티스 창시자에게 배우는 모범 사례' 중
%
소프트웨어 엔지니어가 가져야 할 목표는 분명합니다.
바로, 고객이 당면한 문제를 해결하기 위해 기꺼이 비용을 지불할 만큼의
소프트웨어를 만드는 것입니다.
    - 책 '무엇이 1등 팀을 만드는가?' 중
%
유능한 소프트웨어 엔지니어로 계속 성장하려면 매일 코딩을 해야 한다.
이를 대체할 방법은 없다.
    - 책 '소프트웨어 엔지니어 가이드북' 중
%
개발자건, DevOps 엔지니어건, SRE건, 아니면 쿠버네티스와 씨름하는 플랫폼 엔지니어건
관계없이, 여러분은 모두 자기 나름의 방식으로 세상에 좋은 무언가를 만드는 창조자들이다.
    - 책 'GitOps Cookbook' 중
%
소프트웨어 개체는 끝없는 변경 요구에 노출되어 있다.
    - 책 'The Mythical Man-Month' 중
%
부족한 시간 탓에 망가진 소프트웨어 프로젝트 수는
다른 이유로 그렇게 된 경우를 모두 합한 것보다도 많다.
    - 책 'The Mythical Man-Month' 중
%
어떤 창조적 행위라도 힘들어서 우울해지는 때가 있게 마련이며,
프로그래밍도 예외는 아니다.
    - 책 'The Mythical Man-Month' 중
%
늦어진 소프트웨어 프로젝트에 인력을 추가로 투입하면 더 늦어지게 된다.
    - 브룩스의 법칙
