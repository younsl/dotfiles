테스트를 해본 적이 없다면 잘못될 가능성이 있음을 염두에 둬라.
    - 미상
%
사이트 신뢰성 엔지니어의 핵심 책임 중 하나는
자신들이 관리하는 시스템에 대한 정량화된 신뢰도다.
%
If you can not measure it, you can not improve it.
    - Peter Drucker
%
The only constant is change.
    - Heraclitus
%
희망은 전략이 아니다.
    - Google SRE Team
%
평범하게 운영 중인 당신의 시스템에 운영자가 손을 대야 한다면
그 시스템에 버그가 있다는 뜻이다.
    - Carla Geisser, Google SRE
%
제대로 구성된 모니터링과 알림 파이프라인은 간결하고 명료하다.
    - 책 'Site Reliability Engineering' 중
%
개발자, SRE, 그리고 릴리즈 엔지니어가 함께 일하는 것은 너무나 당연하다.
    - 책 'Site Reliability Engineering' 중
%
무언가를 배우는 데 있어 과거에 있었던 일을 문서로 남기는 것보다 나은 방법은 없다.
    - 책 'Site Reliability Engineering' 중
%
포스트모텀 절차에는 모든 단계마다의 협업과 지식 공유가 담겨있다.
    - 책 'Site Reliability Engineering' 중
%
리뷰를 거치지 않은 포스트모텀 문서는 존재하지 않아야 한다.
    - 책 'Site Reliability Engineering' 중
%
SRE들은 주로 여러 분야에 능하다.
남들보다 큰 그림을 이해하기 위해 깊이 있는 학습보다 폭넓은 학습이 요구되기 때문이다.
%
엔지니어나 클러스터 모니터링 인프라스트럭처가 이 문제를 발견했다면
그에 따른 조치는 상황을 더 악화시킬 수 있다.
    - 책 'Site Reliability Engineering' 중
%
우리는 장애를 피할 수 있을 것이라는 헛된 희망이나 모험을 하지 않고
언젠가는 일어날 것이라는 것을 예상할 수 있었다.
    - 책 'Site Reliability Engineering' 중
%
여러분이 의지하고 있는 어떤 API도 항상 완벽하게 동작하지는 않는다.
    - 책 'Site Reliability Engineering' 중
%
여러분의 엔지니어링 능력이나 테스트의 꼼꼼함 여부와는 무관하게 API는 결함을 가질 것이다.
    - 책 'Site Reliability Engineering' 중
%
성공적인 SRE팀은 신뢰를 바탕으로 구성된다.
    - 책 'Site Reliability Engineering' 중
%
과거의 실수를 기억하지 못하는 사람은 그 실수를 반복한다.
    - 조지 산타야나(George Santayana), 철학자이자 수필가
%
변화의 속도가 빠른 환경에서는 문서 역시 빠른 속도로 노후화된다.
    - 책 'Site Reliability Engineering' 중
%
SRE팀은 매일같이 운영하는 시스템에 대한 포괄적인 지식(시스템의 운영 방법, 장애가 발생하는
요인, 그리고 장애에 대처하는 방법 등)을 갖춰야 한다.
    - 책 'Site Reliability Engineering' 중
%
포스트모텀은 누군가를 비난하기 위한 것이 아니며, 사람이 아닌 절차와 기술에 집중하는 것이다.
    - 책 'Site Reliability Engineering' 중
%
SRE팀은 운영 업무에 50%를 초과하는 시간을 할애할 수 없다.
    - 책 'Site Reliability Engineering' 중
%
모든 것은 관찰 가능성에서 시작됩니다.
무슨 일이 일어나는지 볼 수 있는 능력은 모든 피드백 루프에서 가장 중요한 것입니다.
    - Charity Majors, Honeycomb CTO
%
훌륭한 운영은 프로덕션이 아닌 개발 환경에서 시작된다.
    - 책 'Site Reliability Engineering' 중
%
가능하다면 문서는 관련 코드와 함께 소스 제어 시스템에 있어야 한다.
    - 책 'Site Reliability Engineering' 중
%
SRE 기술은 OS 내부, 네트워킹, 모니터링, 경고, 문제해결, 디버깅,
장애관리, 소프트웨어 엔지니어링, 소프트웨어 성능, 하드웨어, 분산 시스템,
시스템 관리, 용량 계획, 보안, 기타 여러 분야로 확장될 수 있다.
    - 책 'Site Reliability Engineering' 중
%
대부분의 SRE는 T자형이다. 즉, 여러 영역의 광범위한 지식과 하나 또는
몇 개의 영역에서는 깊은 지식을 갖고 있다.
    - 책 'Site Reliability Engineering' 중
%
SRE의 주요 목표는 시스템의 신뢰성을 유지하는 것이다.
    - 책 'Site Reliability Engineering' 중
%
장애는 피할 수 없다.
장애를 피하는 데 모든 것을 걸지 말고 장애를 다루는 데 능숙해져라.
    - 책 'Site Reliability Engineering' 중
%
SRE는 소프트웨어 개발, 시스템 디버깅, 어떻게 시스템이 실패할 수 있는지
상상하는 데 능숙해야 한다.
    - 책 'Site Reliability Engineering' 중
%
SRE 단독으로 하는 일은 거의 없다.
대규모 분산 시스템을 운영하고 지원하려면 다양하고 변화무쌍한 연결을
맺고 있는 많은 사람과의 활동이 필요하다.
    - 책 'Seeking SRE' 중
%
심각한 장애가 처음에는 가벼운 장애로 나타날 수 있다.
사소한 장애가 연쇄적으로 쌓이면서 심각한 장애로 커지기도 한다.
    - 책 'Seeking SRE' 중
%
장애는 중립적인 단어인 만큼 초연하고 냉철한 분석 자세를 가져야 한다.
    - 책 'Seeking SRE' 중
%
우리가 익히 알고 있는 온콜은 이제 그만 종료되어야 한다.
    - 책 'Seeking SRE' 중
%
온콜은 시스템을 계속 가동하기 위한 수단이지만
이 일을 수행하는 사람에게는 매우 해롭고 비효율적이다.
    - 책 'Seeking SRE' 중
%
소프트웨어 장애의 대부분은 변경 관리, 할당량 제한을 초과하는 과도한 자원 사용,
접근 제어 위반 등 외부 작업이나 이와 유사한 상호 작용에서 발생한다.
    - 책 'Seeking SRE' 중
%
SRE의 목표는 프로덕션 환경의 프로덕트 보호이다.
    - 책 'Seeking SRE' 중
%
개선하는 데 있어서 가장 중요한 것은 실제로 개선하고자 하는 의지다.
    - 책 'Seeking SRE' 중
%
기술은 좋든 나쁘든 세상을 바꿀 준비가 되어있고 모든 종류의 엔지니어는 자기 일이
"공익을 위한 것"이며, "삶의 질을 떨어뜨리거나 프라이버시를 침해하거나, 환경을
해치지 않는 것"을 보장할 책임이 있다.
    - 책 'Seeking SRE' 중
%
감추고 숨기기보다는 함께 해결하고 함께 고민하는 것이 장애 대응의 가장 중요한 핵심이며,
그렇게 할 수 있는 조직이 건강한 조직이라고 생각합니다.
    - 책 '요즘 우아한 개발' 중
%
관측 가능성의 구현 과정은 클라우드와 오픈소스를 사용해 클라우드 네이티브에 적합한 관측 가능성 환경을 만들어가는 것이다.
    - 책 '모니터링의 새로운 미래 관측 가능성' 중
%
개발자, 운영자, 데이터 엔지니어, 데이터 분석가가 원하는 완전한 기능을 구현한 솔루션을 구입하는 것이 어려울뿐더러,
조직 간 구성원의 다양한 요구 사항을 만족시키는 것 또한, 쉽지 않다.
단계적이고 점진적, 지속적인 개선을 통해서 조직에 적합하도록 보완해 나가는 것이 오픈소스와 클라우드 네이티브에 기반한 관측 가능성이다.
    - 책 '모니터링의 새로운 미래 관측 가능성' 중
%
관측 가능성의 구현 과정은 클라우드와 오픈소스를 사용해 클라우드 네이티브에 적합한 관측 가능성 환경을 만들어가는 것이다.
    - 책 '모니터링의 새로운 미래 관측 가능성' 중
%
소프트웨어 내부를 볼 수 없을 때는 무엇이 문제인지 추측하는 수밖에 없다.
    - 책 '이펙티브 엔지니어' 중
%
데이터가 뒷받침된 주장은 강력하다. 올바른 지표는 사내정치, 철학적 편견, 제품 관련 논의를
관통하여 논쟁을 신속하게 잠재운다.
    - 책 '이펙티브 엔지니어' 중
%
시스템이 느리게 실패하면 코드 오류의 원인이 불분명해져서
어떤 문제가 일어난 것인지 알아내기 어려워진다.
    - 책 '이펙티브 엔지니어' 중
%
쿠버네티스는 소프트웨어의 배포 및 운영을 간소화하는 놀라운 툴이지만,
아쉽게도 개발자 입장에서 그리 친근하게 다가오거나 생산성을 높여주는 환경이라고 보긴 어렵다.
    - 책 '쿠버네티스 창시자에게 배우는 모범 사례' 중
%
쿠버네티스의 핵심 교리 중 하나는, 시스템 관리자가 쿠버네티스를 코어 API 이상으로
확장시키는 능력이다.
    - 책 '쿠버네티스 창시자에게 배우는 모범 사례' 중
%
개발자가 쿠버네티스에서 작동되는 어플리케이션을 개발하는 동안, 관리자는 애플리케이션의 안정적인
운영에 필요한 대부분의 반복 작업을 자동화하는 (쿠버네티스 API를 호출하는 방법을 알고 있는)
헬퍼 애플리케이션을 개발해왔다.
    - 책 '쿠버네티스 창시자에게 배우는 모범 사례' 중
%
무언가를 개선하기 위해서는 개선하고자 하는 것을 먼저 측정해야 합니다.
    - 책 '무엇이 1등 팀을 만드는가?' 중
%
애플리케이션에게 네트워크는 투명해야 한다. 네트워크 및 애플리케이션 문제가 발생할 때는
문제의 원인을 파악하기 쉬워야 한다.
    - Envoy 발표
%
SRE는 안정적이고 효율적인 인프라를 구축하기 위해 운영을 프로그래밍하고 있다.
    - 책 '세상을 바꾼 빅테크 SRE 챌린지' 중
%
일반적으로 시스템의 가장 위험한 컴포넌트는 시스템을 운영하는 사람이다.
    - 책 '세상을 바꾼 빅테크 SRE 챌린지' 중
%
자동화를 수행하는 주된 동기는 단순명료하게 신뢰성 때문이다.
사람은 쉘 스크립트만큼 신뢰할 수 없다.
    - 책 '세상을 바꾼 빅테크 SRE 챌린지' 중
%
가능하다면 문서는 관련 코드와 함께 소스 제어 시스템에 있어야 한다.
    - 책 '세상을 바꾼 빅테크 SRE 챌린지' 중
%
시스템을 설계하는 모든 조직은 조직의 커뮤니케이션 구조를 복사한 설계를 개발하도록 제한된다.
    - Mel Conway in 1967
%
Any organization that designs a system (defined broadly) will produce
a design whose structure is a copy of the organization's communication structure.
    - Mel Conway in 1967
%
It's always DNS
    - Anonymous sysadmin

